# If running in Colab or a fresh Jupyter environment, uncomment the next line:
# !pip install tqdm rdkit requests pandas

import os
import requests
import time
import logging
import multiprocessing as mp
import pandas as pd
from rdkit import Chem
from rdkit.Chem import AllChem, Draw
from rdkit import DataStructs
from PIL import Image
from tqdm.notebook import tqdm
from IPython.display import display

# ‚úÖ In-memory fingerprint cache
fingerprint_cache = {}

# üîß User configuration
#  GET XANTHOPHYLLS
DEFAULT_SMILES_BASE = 'CC(=O)OC1=CC=CC=C1C(=O)O'
SIMILARITY_THRESHOLD = 0.8
PAUSE_BETWEEN_REQUESTS = 0.2
N_PROCESSES = mp.cpu_count()
FINGERPRINT_NBITS = 2048
FINGERPRINT_RADIUS = 2
KEGG_IDS_FILE = 'compounds.txt'
OUTPUT_CSV = 'resultados_similares_kegg.csv'
FAILED_CSV = 'failed_kegg_ids.csv'
MOLECULE_IMAGE = 'mols_grid.png'

logging.basicConfig(filename='smiles_data_miner.log', level=logging.INFO,
                    format='%(asctime)s %(levelname)s: %(message)s')

headers = {
    'User-Agent': 'Mozilla/5.0'
}

def read_kegg_ids(filename):
    if not os.path.exists(filename):
        logging.error(f"File not found: {filename}")
        return []
    with open(filename, 'r') as f:
        return [line.strip().split('\t')[0] for line in f if line.strip()]

def get_fingerprint(smiles, radius=2, nbits=2048):
    key = (smiles, radius, nbits)
    if key in fingerprint_cache:
        return fingerprint_cache[key]
    mol = Chem.MolFromSmiles(smiles)
    if mol:
        fp = AllChem.GetMorganFingerprintAsBitVect(mol, radius=radius, nBits=nbits)
        fingerprint_cache[key] = fp
        return fp
    return None

def get_smiles_from_kegg(kegg_id, pause=PAUSE_BETWEEN_REQUESTS, timeout=10):
    url = f'https://rest.kegg.jp/get/{kegg_id}/mol'
    try:
        time.sleep(pause)
        response = requests.get(url, headers=headers, timeout=timeout)
        response.raise_for_status()
        mol = Chem.MolFromMolBlock(response.text)
        if mol:
            return Chem.MolToSmiles(mol)
    except Exception as e:
        logging.warning(f"[{kegg_id}] Error fetching SMILES: {e}")
    return None

def tanimoto_similarity_pair(smiles1, smiles2, nbits=2048, radius=2):
    fp1 = get_fingerprint(smiles1, radius, nbits)
    fp2 = get_fingerprint(smiles2, radius, nbits)
    if fp1 and fp2:
        return DataStructs.TanimotoSimilarity(fp1, fp2)
    return 0.0

def evaluar_similitud(args):
    kegg_id, smiles_base, threshold, pause, timeout, nbits, radius = args
    if not kegg_id or not isinstance(kegg_id, str):
        return None
    smiles = get_smiles_from_kegg(kegg_id, pause, timeout)
    if smiles:
        sim = tanimoto_similarity_pair(smiles_base, smiles, nbits, radius)
        if sim >= threshold:
            return (kegg_id, smiles, sim)
    return None

# --- Main execution ---
kegg_ids = read_kegg_ids(KEGG_IDS_FILE)
print(f"Total KEGG compounds to analyze: {len(kegg_ids)}")

pool_args = [
    (kegg_id, SMILES_BASE, SIMILARITY_THRESHOLD, PAUSE_BETWEEN_REQUESTS, 10, FINGERPRINT_NBITS, FINGERPRINT_RADIUS)
    for kegg_id in kegg_ids
]

resultados = []
failed_ids = []

with mp.Pool(N_PROCESSES) as pool:
    for res, kegg_id in zip(tqdm(pool.imap_unordered(evaluar_similitud, pool_args), total=len(pool_args)), kegg_ids):
        if res is not None:
            resultados.append(res)
        else:
            failed_ids.append(kegg_id)

print(f"\n‚úÖ Compounds with similarity ‚â• {SIMILARITY_THRESHOLD}: {len(resultados)}")
if failed_ids:
    print(f"‚ö†Ô∏è Failed KEGG IDs (total {len(failed_ids)}): {failed_ids[:5]}...")

# Save results
pd.DataFrame(resultados, columns=["KEGG_ID", "SMILES", "Tanimoto_Similarity"]).to_csv(OUTPUT_CSV, index=False)
if failed_ids:
    pd.DataFrame(failed_ids, columns=["KEGG_ID"]).to_csv(FAILED_CSV, index=False)

print(f"\nüìÑ Results saved to: {OUTPUT_CSV}")
if failed_ids:
    print(f"üìÑ Failed IDs saved to: {FAILED_CSV}")

# Image output
if resultados:
    mols = [Chem.MolFromSmiles(r[1]) for r in resultados[:6]]
    img = Draw.MolsToGridImage(
        mols,
        molsPerRow=3,
        subImgSize=(200, 200),
        useSVG=False,
        returnPNG=False  # ‚úÖ Ensures PIL.Image is returned
    )
    img.save(MOLECULE_IMAGE)
    print(f"\nüß™ Top molecules grid image saved as: {MOLECULE_IMAGE}")
    try:
        display(img)
    except:
        print("Image display not supported in this environment.")
else:
    print("‚ùå No molecules found above the similarity threshold.")

# Preview top 10
if os.path.exists(OUTPUT_CSV):
    df = pd.read_csv(OUTPUT_CSV)
    display(df.head(10))


# ‚úÖ 1. Add Labels to Molecules (e.g., KEGG ID or Similarity) 
# You can pass labels via the legends argument in Draw.MolsToGridImage:

mols = [Chem.MolFromSmiles(r[1]) for r in resultados[:6]]
legends = [f"{r[0]} ({r[2]:.2f})" for r in resultados[:6]]

img = Draw.MolsToGridImage(
    mols,
    molsPerRow=3,
    subImgSize=(250, 250),
    legends=legends,
    useSVG=False,
    returnPNG=False
)
img.save(MOLECULE_IMAGE)
display(img)

