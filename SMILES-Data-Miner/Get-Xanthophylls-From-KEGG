!pip install tqdm rdkit
from tqdm import tqdm

import requests
from rdkit import Chem
from rdkit.Chem import AllChem, Draw
from rdkit import DataStructs
import multiprocessing as mp
import csv
import time

# === Global config ===
smiles_base = 'CC(=O)OC1=CC=CC=C1C(=O)O'
umbral_similitud = 0.7
pausa_entre_solicitudes = 0.2
num_procesos = mp.cpu_count()

# === Functions ===
def get_smiles_from_kegg(kegg_id):
    url = f'https://rest.kegg.jp/get/{kegg_id}/mol'
    try:
        time.sleep(pausa_entre_solicitudes)
        r = requests.get(url, timeout=10)
        if r.status_code == 200:
            mol = Chem.MolFromMolBlock(r.text)
            if mol:
                return Chem.MolToSmiles(mol)
    except Exception as e:
        print(f"[{kegg_id}] Error: {e}")
    return None

def tanimoto_similarity_pair(smiles1, smiles2):
    mol1 = Chem.MolFromSmiles(smiles1)
    mol2 = Chem.MolFromSmiles(smiles2)
    if mol1 and mol2:
        fp1 = AllChem.GetMorganFingerprintAsBitVect(mol1, radius=2, nBits=2048)
        fp2 = AllChem.GetMorganFingerprintAsBitVect(mol2, radius=2, nBits=2048)
        return DataStructs.TanimotoSimilarity(fp1, fp2)
    return 0.0

def evaluar_similitud(kegg_id):
    smiles = get_smiles_from_kegg(kegg_id)
    if smiles:
        sim = tanimoto_similarity_pair(smiles_base, smiles)
        if sim >= umbral_similitud:
            return (kegg_id, smiles, sim)
    return None

# === Entry point ===
if __name__ == '__main__':
    # Replace this with your real list or loading function
    kegg_ids = ['C00001', 'C00002', 'C00003', 'C00004']  # Example subset

    print(f"Iniciando procesamiento en paralelo con {num_procesos} n√∫cleos...")
    with mp.Pool(num_procesos) as pool:
        resultados = pool.map(evaluar_similitud, kegg_ids)

    resultados = [r for r in resultados if r is not None]
    print("Resultados similares:")
    for r in resultados:
        print(r)

    # Ordenar por similitud descendente
    resultados.sort(key=lambda x: x[2], reverse=True)

    # Guardar en CSV
    with open("resultados_similares_kegg.csv", "w", newline="") as f:
        writer = csv.writer(f)
        writer.writerow(["KEGG_ID", "SMILES", "Similitud_Tanimoto"])
        writer.writerows(resultados)

    print(f"\n‚úÖ Total compuestos similares encontrados: {len(resultados)}")
    print("üìÅ Guardados en: resultados_similares_kegg.csv")

    # Mostrar primeros 6 con imagen
    if resultados:
        print("\nüî¨ Mostrando primeras mol√©culas similares...")
        mols = [Chem.MolFromSmiles(r[1]) for r in resultados[:6]]
        img = Draw.MolsToGridImage(mols, molsPerRow=3, subImgSize=(200,200))
        img.show()

